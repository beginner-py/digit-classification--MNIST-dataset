# -*- coding: utf-8 -*-
"""digit classification NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ONBdRLy4v1REVHA8NVQ-zBtFvyGrvC4i

**importing dependencies**
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

"""loading the MNIST data from keras.dataset"""

(X_train, Y_train), (X_test, Y_test) = mnist.load_data()

type(X_train)

print(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)

"""training data = 60000 images with 28 * 28 (height * width)
test data = 10000 images (label 0-9) dimension (28*28)
"""

print(X_train[10])

print(X_train[10].shape)

#display image
plt.imshow(X_train[5])
plt.show()

#print corresponding label
print(Y_train[5])

"""Image labels"""

print(Y_train.shape)
print(Y_test.shape)

#unique values in y train
print(np.unique(Y_train))
print(np.unique(Y_test))

"""we can use these labels as such or we can also apply One Hot Encoding

All the images have same dimension in this dataset if not resize all the images
"""

#scaling the values (divide by max value)
X_train = X_train/255
X_test = X_test/255

print(X_train[10])

"""Building a NN"""

# setting layers for artificial NN
model = keras.Sequential([keras.layers.Flatten(input_shape = (28,28)),
                          keras.layers.Dense(50, activation = 'relu'),
                          keras.layers.Dense(50, activation = 'relu'),
                          keras.layers.Dense(10, activation = 'sigmoid')     # no of neurons in output layer because 10 classes (0-9)
])

#compile the NN
# use categorical_crossentropy when One Hot Encoding is used
model.compile(optimizer = 'adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

#training the NN
model.fit(X_train, Y_train, epochs = 10)

"""training data accuracy = 99.45%"""

loss, accuracy = model.evaluate(X_test, Y_test)
print(accuracy)

"""test data accuracy = 97.2%"""

print(X_test.shape)

#display first datapoint in X_test
plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred = model.predict(X_test)

print(Y_pred.shape)

print(Y_pred[0])

"""model.predict() gives the prediction probability of each class for that data point"""

#converting prediction probablity to class label
label_for_first_image = np.argmax(Y_pred[0])
print(label_for_first_image)

print(Y_pred)

#converting prediction probablity to class label for all data points

y_pred_labels = [np.argmax(i) for i in Y_pred]
print(y_pred_labels)

"""Y_test ==> grounf truth
Y_pred_labels ==> model predictions

Build confusion matrix
"""

conf_mat = confusion_matrix(Y_test, y_pred_labels)
print(conf_mat)

plt.figure(figsize = (15,7))
sns.heatmap(conf_mat, annot = True, fmt = 'd', cmap = 'Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

"""Building a predictive system"""

input_image_path = '/content/mnist data test.jpg'
input_image = cv2.imread(input_image_path)

type(input_image)

print(input_image)

cv2_imshow(input_image)

input_image.shape

grayscale_image = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

grayscale_image.shape

input_image_resize = cv2.resize(grayscale_image, (28,28))

input_image_resize.shape

cv2_imshow(input_image_resize)

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28]) # second argument 1 stands for 1 image that we are predicting

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

"""predictive system"""

input_image_path = input('Enter path of the image to be predicted: ')
input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)
gray_scale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

new_img = cv2.resize(gray_scale, (28,28))

new_img = new_img/255

image_reshaped = np.reshape(new_img, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)
print('The Handwritten digit is recognised as: ', input_pred_label)